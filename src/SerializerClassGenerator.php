<?php

namespace Serializer;

use Metadata\ClassMetadata;

/**
 * Class ObjectSerializerGenerator
 *
 * @package Serializer
 * @author Tales Santos <tales.maxmilhas@gmail.com>
 */
class SerializerClassGenerator
{
    /**
     * @var string
     */
    private $path;

    /**
     * @var TypeRegistryInterface
     */
    private $typeRegistry;

    /**
     * @var bool
     */
    private $debug;

    /**
     * @var array
     */
    private $generated = [];

    /**
     * SerializerClassGenerator constructor.
     * @param string $path
     * @param TypeRegistryInterface $typeRegistry
     * @param bool $debug
     */
    public function __construct(string $path, TypeRegistryInterface $typeRegistry, bool $debug = false)
    {
        $this->path = $path;
        $this->typeRegistry = $typeRegistry;
        $this->debug = $debug;
    }

    /**
     * @param ClassMetadata $classMetadata
     * @param Serializer $serializer
     * @return SerializerClassInterface
     */
    public function getGeneratorFor(ClassMetadata $classMetadata, Serializer $serializer): SerializerClassInterface
    {
        $fqn = $this->getClassName($classMetadata);

        if (isset($this->generated[$fqn])) {
            return $this->generated[$fqn];
        }

        $filename = $this->getFilename($classMetadata);

        if (!$this->debug && file_exists($filename)) {
            require_once $filename;
            return $this->generated[$fqn] = new $fqn($serializer, $classMetadata);
        }

        $code =
            $this->classDeclaration($fqn) .
            $this->serializeMethodDeclaration($classMetadata) .
            $this->serializeMethodBody($classMetadata) .
            $this->endOfSerializeMethod() .
            $this->endClass();


        file_put_contents($filename, $code);
        chmod($filename, 0664);

        require $filename;

        return $this->generated[$fqn] = new $fqn($serializer, $classMetadata);
    }

    private function getClassName(ClassMetadata $metadata): string
    {
        return str_replace('\\', '', $metadata->name) . 'Serializer';
    }

    private function getFilename(ClassMetadata $metadata): string
    {
        return $this->path . DIRECTORY_SEPARATOR . $this->getClassName($metadata) . '.php';
    }

    private function classDeclaration(string $className): string
    {
        return <<<EOF
<?php

use Serializer\AbstractSerializerClass;
use Serializer\SerializationContext;

/**
 * THIS CLASS WAS GENERATED BY THE SERIALIZER. DO NOT EDIT THIS FILE.
 */
class $className extends AbstractSerializerClass
{

EOF;
    }

    private function serializeMethodDeclaration(ClassMetadata $metadata): string
    {
        return <<<EOF
    /**
     * @param {$metadata->name} \$object
     * @param SerializationContext \$context
     * @return array
     */
    public function serialize(\$object, SerializationContext \$context): array
    {

EOF;
    }

    private function serializeMethodBody(ClassMetadata $metadata): string
    {
        $code = <<<EOF
        if (!\$object instanceof {$metadata->name}) {
            throw new \InvalidArgumentException(sprintf('%s can serialize instances of "%s" only. "%s" given', get_class(\$this), '{$metadata->name}', is_object(\$object) ? get_class(\$object) : gettype(\$object)));
        }

        \$data = [];
        \$shouldSerializeNull = \$context->shouldSerializeNull();

EOF;
        $code .=
            $this->properties($metadata) .
            $this->virtualProperties($metadata);

        $code .= <<<EOF
        return \$data;

EOF;

        return $code;
    }

    private function endOfSerializeMethod(): string
    {
        return <<<EOF
    }

EOF;

    }

    private function endClass(): string
    {
        return <<<EOF
}

EOF;
    }

    private function properties(ClassMetadata $metadata): string
    {
        $code = '';

        foreach ($metadata->propertyMetadata as $property) {
            $getter = "\$object->{$property->getter}()";
            $value = '$value';

            $code .= <<<EOF
        #property '$property->name'
        if (\$this->isPropertyGroupExposed('{$property->name}', \$context)) {
            if (null !== \$value = $getter) {

EOF;
            // scalar type?
            if ($this->isScalarType($property->type)) {
                $code .= <<<EOF
                \$data['$property->exposeAs'] = {$this->castType($value, $property->type)};
EOF;
            } else {
                // custom type
                $code .= <<<EOF
                \$data['$property->exposeAs'] = \$this->serializer->toArray($value, \$context);
EOF;
            }

            $code .= <<<EOF

            } elseif (\$shouldSerializeNull) {
                \$data['$property->exposeAs'] = null;
            }
        }

EOF;
        }

        return $code;
    }

    private function virtualProperties(ClassMetadata $metadata): string
    {
        $code = '';

        foreach ($metadata->methodMetadata as $property) {
            $getter = "\$object->{$property->name}()";
            $value = '$value';

            $code .= <<<EOF
        #virtual property '$property->name'
        if (\$this->isVirtualPropertyGroupExposed('{$property->name}', \$context)) {
            if (null !== \$value = $getter) {

EOF;

            if ($this->isScalarType($property->type)) {
                $code .= <<<EOF
                \$data['$property->exposeAs'] = {$this->castType($value, $property->type)};
EOF;
            } else {
                $code .= <<<EOF
                \$data['$property->exposeAs'] = \$this->serializer->toArray($value, \$context);
EOF;
            }

            $code .= <<<EOF

            } elseif (\$shouldSerializeNull) {
                \$data['$property->exposeAs'] = null;
            }
        }

EOF;

        }

        return $code;
    }

    private function castType(string $value, string $type)
    {
        return sprintf('(%s) %s', $type, $value);
    }

    private function isScalarType(string $type)
    {
        return in_array($type, ['integer', 'string', 'float', 'boolean']);
    }
}
